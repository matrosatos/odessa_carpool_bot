from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime, timedelta

from keyboards.buttons import passenger_date_menu, main_menu, trips_result_menu
from database import get_trips_by_date

router = Router()

class PassengerStates(StatesGroup):
    choosing_date = State()

@router.message(F.text == "üßç –Ø –ø–∞—Å–∞–∂–∏—Ä")
async def passenger_start(message: Message, state: FSMContext):
    today = datetime.now().strftime("%d.%m.%Y")
    tomorrow = (datetime.now() + timedelta(days=1)).strftime("%d.%m.%Y")
    await state.set_state(PassengerStates.choosing_date)
    await message.answer(
        "–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –ø–æ—ó–∑–¥–∫–∏:",
        reply_markup=passenger_date_menu(today, tomorrow)
    )

@router.message(PassengerStates.choosing_date)
async def show_trips(message: Message, state: FSMContext):
    text = message.text

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É
    if text.startswith("üìÖ –°—å–æ–≥–æ–¥–Ω—ñ"):
        date = datetime.now().strftime("%Y-%m-%d")
    elif text.startswith("üìÜ –ó–∞–≤—Ç—Ä–∞"):
        date = (datetime.now() + timedelta(days=1)).strftime("%Y-%m-%d")
    elif text == "üîÅ –û–Ω–æ–≤–∏—Ç–∏":
        data = await state.get_data()
        date = data.get("date")
        if not date:
            await message.answer("–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É.", reply_markup=main_menu())
            return
    elif text == "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
        await state.clear()
        await message.answer("üè† –í–∏ –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é.", reply_markup=main_menu())
        return
    elif text in ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "‚ùå –í—ñ–¥–º—ñ–Ω–∞"]:
        await state.clear()
        await message.answer("üö™ –°–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=main_menu())
        return
    else:
        # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ ‚Äì –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä —Å–Ω–æ–≤–∞
        today = datetime.now().strftime("%d.%m.%Y")
        tomorrow = (datetime.now() + timedelta(days=1)).strftime("%d.%m.%Y")
        await message.answer(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –∑ –∫–Ω–æ–ø–æ–∫.",
            reply_markup=passenger_date_menu(today, tomorrow)
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –ø–æ–µ–∑–¥–∫–∏
    await state.update_data(date=date)
    trips = await get_trips_by_date(date)

    if not trips:
        await message.answer(
            "–ù–∞ —Ü—é –¥–∞—Ç—É –ø–æ—ó–∑–¥–æ–∫ —â–µ –Ω–µ–º–∞—î üòï",
            reply_markup=trips_result_menu()
        )
    else:
        lines = []
        for _, time, start, end, price, user_id in trips:
            lines.append(
                f"üöó <b>{time}</b>\n"
                f"{start} ‚Üí {end}\n"
                f"üí∞ {price}‚Ç¥\n"
                f"‚úâ <a href='tg://user?id={user_id}'>–ù–∞–ø–∏—Å–∞—Ç–∏ –≤–æ–¥—ñ—é</a>"
            )
        result = "\n\n".join(lines)
        await message.answer(
            f"<b>–î–æ—Å—Ç—É–ø–Ω—ñ –ø–æ—ó–∑–¥–∫–∏ –Ω–∞ {date}:</b>\n\n{result}",
            reply_markup=trips_result_menu()
        )

    await state.clear()
